# -*- coding: utf-8 -*-
#############################################################
#  context
#############################################################
import base64, codecs
elfary='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'
valderrama='lwdC5lbWJ1YXJ5LmluZm8sY2FsbD10dix0bWRiX2lkPSVzLHNlYXNvbj0lcyknICUgKAogc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXQogKQogKQogKQogICBpZiBzZWxmIC4gaXRlbSAuIGdldCAoICdwbGF5Q291bnQnICkgOgogICAgaWYgMiAtIDI6IElJaUlJaUlpMTFJMSArIGlJMWlJSTFJMUkxaSAtIEkxSWkxSTEgKyBvb09PTyAuIElJaUlJaUlpMTFJMQogICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzAwODEgKSAsICdtYXJrQXNVbndhdGNoZWQnICkgKQogICBlbHNlIDoKICAgIGlmIDE1IC0gMTU6IG9vbzAwMAogICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzAwODIgKSAsICdtYXJrQXNXYXRjaGVkJyApICkKICAgIGlmIDYzIC0gNjM6IG8wMG8wT08wME8KICAgIGlmIDgxIC0gODE6IE9vb09vbyAuIG8wMG8wT08wME8gLyBpMWkxaTExMTFJICsgT28gLyBPb28wT29vICUgT09PMDAwMDBPCiAgZWxpZiBzZWxmIC4gaXRlbSBbICdjb250ZW50JyBdID09ICdlcGlzb2RlcycgOgogICBpZiA3NyAtIDc3OiBpSWlpaTFpIC8gaUkxaUlJMUkxSTFpIC0gb09vME8wMCAtIE9vbzBPb28gJSBvT28wTzAwCiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMTUwICkgLCAnc2V0X3ZpZXcnICkgKQogICBpZiA3MyAtIDczOiBPT08wMDAwME8gLiBPbyAqIEkxSSAvIGkxaTFpMTExMUkgKyBJMUlpMUkxCiAgIGlmIDMxIC0gMzE6IGkxaTFpMTExMUkgJSBJMUlpMUkxCiAgIEkxMWlJaTFpIC4gYXBwZW5kICgKICgKICdFbWJ1YXJ5IEluZm8nICwKICdSdW5TY3JpcHQoc2NyaXB0LmVtYnVhcnkuaW5mbyxjYWxsPXR2LHRtZGJfaWQ9JXMsc2Vhc29uPSVzLCBlcGlzb2RlPSVzKScgJSAoCiBzZWxmIC4gaXRlbSBbICd0bWRiJyBdICwgc2VsZiAuIGl0ZW0gWyAnc2Vhc29uJyBdICwgc2VsZiAuIGl0ZW0gWyAnZXBpc29kZScgXQogKQogKQogKQogICBpZiAxIC0gMTogT09PMDAwMDBPIC0gb09vME8wMCAtIGkxIC4gb09vME8wMAogIGVsc2UgOgogICBpZiA5MSAtIDkxOiBpSTFpSUkxSTFJMWkgKiBpMSAuIG9vT09PCiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMTUxICkgLCAnc2V0X3ZpZXcnICkgKQogICBpZiA4MSAtIDgxOiBJMUkgKiBPbyAtIGkxICUgT29vT29vICogb29PT08KICByZXR1cm4gSTExaUlpMWkKICBpZiAxOSAtIDE5OiBJaQogIGlmIDIyIC0gMjI6IG8wMG8wT08wME8gJSBpSTFpSUkxSTFJMWkgKyBPbwogZGVmIHNob3cgKCBzZWxmICwgbWVudSA9IE5vbmUgKSA6CiAgaWYgbWVudSA6CiAgIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgPSBtZW51CiAgZWxzZSA6CiAgIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgPSBzZWxmIC4gX2dlbmVyYXRlX21lbnUgKCApCiAgIGlmIDYwIC0gNjA6IG9vbzAwMCArIGlJaWlpMWkgKyBJSWlJSWlJaTExSTEgJSBpMWkxaTExMTFJIC0gSWkgJSBPb28wT29vCiAgaWYgbGVuICggc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCApID4gMCA6CiAgIHNlbGYgLiBsYWJlbEFjdGlvbmxpc3QgLiBzb3J0ICgga2V5ID0gbGFtYmRhIE9vaUkxaWlJMTFJSWkxIDogT29pSTFpaUkxMUlJaTEgWyAwIF0gKQogICBzZWxmIC4gbGFiZWxBY3Rpb25saXN0IC4gaW5zZXJ0ICggMCAsICggJ1tDT0xPUiBnb2xkXVBhbGFudGlyIDNbL0NPTE9SXScgLCBOb25lICkgKQogICBPT08gPSBsaXN0ICggbWFwICggbGFtYmRhIE9vaUkxaWlJMTFJSWkxIDogT29pSTFpaUkxMUlJaTEgWyAwIF0gLCBzZWxmIC4gbGFiZWxBY3Rpb25saXN0ICkgKQogICBPMG9vT08wID0gMAogICB3aGlsZSBPMG9vT08wID09IDAgOgogICAgTzBvb09PMCA9IHhibWNndWkgLiBEaWFsb2cgKCApIC4gY29udGV4dG1lbnUgKCBPT08gKQogICAgaWYgNjQgLSA2NDogb29vMDAwICogSWkgJSBpSTFpSUkxSTFJMWkKICAgaWYgTzBvb09PMCA+IDAgOgogICAgc2VsZiAuIF9leGVjICggc2VsZiAuIGxhYmVsQWN0aW9ubGlzdCBbIE8wb29PTzAgXSApCiAgICBpZiAxMiAtIDEyOiBpMWlpSUlJMTExICsgb29vMDAwIC4gaUlpaWkxaQogICAgaWYgMSAtIDE6IGlJMWlJSTFJMUkxaSAlIElpIC0gaUlpaWkxaSAvIE9PTzAwMDAwTyArIGlJMWlJSTFJMUkxaSAtIElpCiBkZWYgX2V4ZWMgKCBzZWxmICwgbGFiZWxBY3Rpb24gKSA6CiAgSWlJSTFJaWkxMSAsIGkxaTFJaSA9IGxhYmVsQWN0aW9uCiAgaWkxaUkxSTExID0gTm9uZQogIE9Pb08wb09vMCA9IDUwMDAKICBpSUkxSWkgPSBvcyAuIHBhdGggLiBqb2luICggeGJtY3ZmcyAuIHRyYW5zbGF0ZVBhdGggKCBBRERPTiAuIGdldEFkZG9uSW5mbyAoICdQYXRoJyApICkgLCAnaWNvbi5wbmcnICkKICBpZiAzNyAtIDM3OiBvMDBvME9PMDBPICsgSUlpSUlpSWkxMUkxICUgaUkxaUlJMUkxSTFpIC8gSUlpSUlpSWkxMUkxICUgaTFpaUlJSTExMSArIG9vbzBPMG9PMDAKICBpZiBpMWkxSWkgPT0gJ3NldF92aWV3JyA6CiAgIGlmIDk4IC0gOTg6IGlJMWlJSTFJMUkxaSAtIEkxSSArIGkxICogb29vMDAwICUgaTEKICAgV2F0Y2hlZCAoICkgLiBzZXRWaWV3ICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSApCiAgIHhibWNndWkgLiBEaWFsb2cgKCApIC4gbm90aWZpY2F0aW9uICggQURET04gLiBnZXRBZGRvbkluZm8gKCAnbmFtZScgKSAsIElpSUkxSWlpMTEgKQogICBpZiAxMDAgLSAxMDA6IGkxaWlJSUkxMTEgLiBJSWlJSWlJaTExSTEgKiBvb28wMDAgKiBvb28wMDAKICBlbGlmIGkxaTFJaSA9PSAnbm90aWZpY2F0aW9uJyA6CiAgIGlmIDg1IC0gODU6IElJaUlJaUlpMTFJMSAvIE9vb09vbyAuIG8wMG8wT08wME8gJSBPbyArIE9vIC0gaUlpaWkxaQogICBpaTFpSTFJMTEgPSBzZWxmIC4gaXRlbSBbICdtZXNzYWdlJyBdCiAgIE9Pb08wb09vMCA9IDEwMDAwCiAgIGlmIDU5IC0gNTk6IE9vb09vbwogIGVsaWYgaTFpMUlpID09ICd0cmFpbGVyJyA6CiAgIHNlbGYgLiBidXNjYXJUcmFpbGVyICggc2VsZiAuIGl0ZW0gWyAndHlwZScgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLCBzZWxmIC4gaXRlbSBbICd0aXRsZScgXSApCiAgIGlmIDUzIC0gNTM6IGkxaTFpMTExMUkgLyBvb09PTyAtIE9PTzAwMDAwTyArIG9vbzAwMCAqIGkxaTFpMTExMUkgKiBpMWlpSUlJMTExCiAgZWxpZiBpMWkxSWkgPT0gJ21hcmtBc1dhdGNoZWQnIDoKICAgV2F0Y2hlZCAoICkgLiBtYXJrQXNXYXRjaGVkICggc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSAsIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gLAogc2VsZiAuIGl0ZW0gLiBnZXQgKCAnc2Vhc29uJyApICwgc2VsZiAuIGl0ZW0gLiBnZXQgKCAnZXBpc29kZScgKSApCiAgIHhibWMgLiBleGVjdXRlYnVpbHRpbiAoICdDb250YWluZXIuUmVmcmVzaCcgKQogICBpZiA4NyAtIDg3OiBpMWlpSUlJMTExIC0gSUlpSUlpSWkxMUkxICogSWkgJSBpMWkxaTExMTFJICUgaTEKICAgaWYgODEgLSA4MTogaTEgKyBpMWkxaTExMTFJICogT28gLSBPbyAqIEkxSWkxSTEgLSBvT28wTzAwCiAgZWxpZiBpMWkxSWkgPT0gJ21hcmtBc1Vud2F0Y2hlZCcgOgogICBXYXRjaGVkICggKSAuIG1hcmtBc1Vud2F0Y2hlZCAoIHNlbGYgLiBpdGVtIFsgJ2NvbnRlbnQnIF0gLCBzZWxmIC4gaXRlbSBbICd0bWRiJyBdICwKIHNlbGYgLiBpdGVtIC4gZ2V0ICggJ3NlYXNvbicgKSAsIHNlbGYgLiBpdGVtIC4gZ2V0ICggJ2VwaXNvZGUnICkgKQogICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAnQ29udGFpbmVyLlJlZnJlc2gnICkKICAgaWYgNCAtIDQ6IGkxaWlJSUkxMTEKICBlbGlmIGkxaTFJaSA9PSAnTm9TZWd1aXInIDoKICAgV2F0Y2hlZCAoICkgLiBzZXRTaG93SGlkZSAoIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gKQogICB4Ym1jIC4gZXhlY3V0ZWJ1aWx0aW4gKCAnQ29udGFpbmVyLlJlZnJlc2gnICkKICAgaWYgOCAtIDg6IElpSUlpaTExSWkgKyBPb29Pb28gLSBpMQogIGVsaWYgaTFpMUlpID09ICdyZXNldFJlc3VtZVRpbWUnIDoKICAgV2F0Y2hlZCAoICkgLiByZXNldFJlc3VtZVRpbWUgKCBzZWxmIC4gaXRlbSBbICdjb250ZW50JyBdICwgc2VsZiAuIGl0ZW0gWyAndG1kYicgXSAsCiBzZWxmIC4gaXRlbSAuIGdldCAoICdzZWFzb24nICkgLCBzZWxmIC4gaXRlbSAuIGdldCAoICdlcGlzb2RlJyApICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5SZWZyZXNoJyApCiAgIGlmIDY4IC0gNjg6IEkxSWkxSTEgJSBJMUlpMUkxIC8gT09PMDAwMDBPIC4gb29vMDAwCiAgZWxpZiBpMWkxSWkgPT0gJ3Nob3dTZWFzb25zJyA6CiAgIE9vMG9vbzBPTzAgPSBQM0l0ZW0gKCBhY3Rpb24gPSAnbGlzdGFkb190ZW1wb3JhZGFTJyAsCiB0bWRiID0gc2VsZiAuIGl0ZW0gLiBnZXQgKCAndG1kYicgKSAsCiBwbG90ID0gc2VsZiAuIGl0ZW0gLiBnZXQgKCAncGxvdCcgKSAsCiBwb3N0ZXIgPSBzZWxmIC4gaXRlbSAuIGdldCAoICdwb3N0ZXInICkgLAogZmFuYXJ0ID0gc2VsZiAuIGl0ZW0gLiBnZXQgKCAnZmFuYXJ0JyApICkKICAgaWYgODAgLSA4MDogSUlpSUlpSWkxMUkxIC8gT29vT29vICUgaUkxaUlJMUkxSTFpIC8gb29PT08gKiBvb09PTyAtIElpaTFpCiAgIE8wb29PTzBPME8wTyA9ICclcz8lcycgJSAoIHN5cyAuIGFyZ3YgWyAwIF0gLCBPbzBvb28wT08wIC4gdG91cmwgKCApICkKICAgeGJtYyAuIGV4ZWN1dGVidWlsdGluICggJ0NvbnRhaW5lci5VcGRhdGUocGx1Z2luOi8vJXMpJyAlIE8wb29PTzBPME8wTyApCiAgIGlmIDU5IC0gNTk6IG9vbzAwMCAvIE9vIC0gaTEKICBlbGlmIGkxaTFJaSA9PSAnYWRkRmF2b3JpdG8nIDoKICAgdHJ5IDoKICAgIFdhdGNoZWQgKCApIC4gYWRkRmF2b3JpdG8gKCBQM0l0ZW0gKCApIC4gZnJvbWpzb24gKCBzZWxmIC4gaXRlbSApICkKICAgIGlpMWlJMUkxMSA9IGxvY2FsaXplICggMzAwNDQgKSAlIHNlbGYgLiBpdGVtIFsgJ3RpdGxlJyBdCiAgIGV4Y2VwdCA6CiAgICBpaTFpSTFJMTEgPSBsb2NhbGl6ZSAoIDMwMDQ3ICkKICAgIGlmIDQ5IC0gNDk6IG8wMG8wT08wME8gKyBvT28wTzAwICsgb29vMDAwIC4gSWlpMWkgKyBvMDBvME9PMDBPCiAgZWxpZiBpMWk'
montolla='IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0KaWYgODIgLSA4MjogSWlpMWkKaW1wb3J0IG9zCmltcG9ydCByZQppbXBvcnQgc3lzCmlmIDg3IC0gODc6IElpICUgaTFpMWkxMTExSSAuIE9vIC8gT29vT29vICogSTFJaTFJMSAtIEkxSQppbXBvcnQgeGJtYwppbXBvcnQgeGJtY2d1aQppbXBvcnQgeGJtY3ZmcwppbXBvcnQgeGJtY2FkZG9uCmlmIDgxIC0gODE6IGkxICsgb29PT08gLyBvT28wTzAwICogaTFpaUlJSTExMSAqIElpSUlpaTExSWkKaW1wb3J0IGJ1aWx0aW5zICwgYmFzZTY0CmZyb20gdHlwZXMgaW1wb3J0IE1vZHVsZVR5cGUKaWYgODQgLSA4NDogb29vMDAwIC0gT29vME9vbyArIGlJMWlJSTFJMUkxaSAuIElJaUlJaUlpMTFJMQppZiA5OSAtIDk4IDogaUkxMTFpaUlpMTFpID0gYmFzZTY0CmlmIDc3IC0gNzc6IGlJaWlpMWkgLSBvb28wTzBvTzAwIC4gbzAwbzBPTzAwTwpPb28gPSBfX2ltcG9ydF9fCmRlZiBJMSAoIG5hbWUgLCBsb2NhbHMgPSBOb25lICwgZ2xvYmFscyA9IE5vbmUgLCBmcm9tbGlzdCA9IFsgXSAsIGxldmVsID0gMCApIDoKIGNsYXNzIGlpICggb2JqZWN0ICkgOgogIGRlZiBfX2luaXRfXyAoIHNlbGYgLCBtb2R1bGVzICkgOgogICBzZWxmIC4gX21vZHVsZXMgPSBkaWN0ICggbW9kdWxlcyApCiAgZGVmIGZpbmRfbW9kdWxlICggc2VsZiAsIGZ1bGxuYW1lICwgcGF0aCApIDoKICAgaWYgZnVsbG5hbWUgaW4gc2VsZiAuIF9tb2R1bGVzIC4ga2V5cyAoICkgOgogICAgcmV0dXJuIHNlbGYKICAgcmV0dXJuIE5vbmUKICBkZWYgbG9hZF9tb2R1bGUgKCBzZWxmICwgbmFtZSApIDoKICAgaWlJID0gTW9kdWxlVHlwZSAoIG5hbWUgKQogICBpaUkgLiBfX2xvYWRlcl9fID0gc2VsZgogICBpaUkgLiBfX3BhY2thZ2VfXyA9IG5hbWUgLiBzcGxpdCAoICcuJyApIFsgMCBdCiAgIHN5cyAuIG1vZHVsZXMgWyBuYW1lIF0gPSBpaUkKICAgZXhlYyAoIHNlbGYgLiBfbW9kdWxlcyBbIG5hbWUgXSAsIGlpSSAuIF9fZGljdF9fICkKICAgcmV0dXJuIGlpSQogaWYgbmFtZSBub3QgaW4gc3lzIC4gbW9kdWxlcyBhbmQgbmFtZSAuIHN0YXJ0c3dpdGggKCAnbGlicy4nICkgOgogIGkxSWkxaSA9IG9zIC4gcGF0aCAuIGpvaW4gKCB4Ym1jdmZzIC4gdHJhbnNsYXRlUGF0aCAoIHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldEFkZG9uSW5mbyAoICdQYXRoJyApICkgLCBuYW1lIC4gcmVwbGFjZSAoICcuJyAsIG9zIC4gcGF0aCAuIHNlcCApICsgIi5tZCIgKQogIGlmIG9zIC4gcGF0aCAuIGlzZmlsZSAoIGkxSWkxaSApIDoKICAgd2l0aCBvcGVuICggaTFJaTFpICwgInJiIiApIGFzIG9Pb29vME9PTyA6CiAgICBPbzAwMG9vTzBPb29vID0gb09vb28wT09PIC4gcmVhZCAoICkKICAgSUlpSSA9IGxlbiAoIE9vMDAwb29PME9vb28gKQogICBvTzAgPSBJSWlJIC8vIDMKICAgaTFpaWlpSUlJaUlpID0gT28wMDBvb08wT29vbyBbIElJaUkgLSBvTzAgOiBdCiAgIE9vMDAwb29PME9vb28gPSBPbzAwMG9vTzBPb29vIFsgOiBJSWlJIC0gb08wIF0KICAgaTFpaWlpSUlJaUlpICs9IE9vMDAwb29PME9vb28gWyA6IG9PMCBdICsgT28wMDBvb08wT29vbyBbIG9PMCA6IF0gWyA6IDogLSAxIF0KICAgc3lzIC4gbWV0YV9wYXRoIC4gYXBwZW5kICggaWkgKCB7IG5hbWUgOiBpSTExMWlpSWkxMWkgKCBpMWlpaWlJSUlpSWkgKSAuIGRlY29kZSAoICd1dGYtOCcgKSB9ICkgKQogcmV0dXJuIE9vbyAoIG5hbWUgLCBsb2NhbHMgLCBnbG9iYWxzICwgZnJvbWxpc3QgLCBsZXZlbCApCiBpZiAyMiAtIDIyOiBPT08wMDAwME8gLiBJMUkgLyBJMUkgKyBJaQppZiA5OCAtIDk2IDogaUkxMTFpaUlpMTFpID0gaUkxMTFpaUlpMTFpIC4gYjg1ZGVjb2RlCmJ1aWx0aW5zIC4gX19pbXBvcnRfXyA9IEkxCmZyb20gbGlicyAuIGlvaWlJMWkxMSBpbXBvcnQgUDNJdGVtCmZyb20gbGlicyAuIGlvSWlpaUkgaW1wb3J0IFRtZGIKZnJvbSBsaWJzIC4gaW9pMUlpSSBpbXBvcnQgbG9jYWxpemUgLCBsb2dnZXIgLCBzZXRfc2V0dGluZyAsIEtPRElfVkVSU0lPTiAsIGdldF9zZXR0aW5nICwgQURET04KZnJvbSBsaWJzIC4gaW9JMWlpSUkxMSBpbXBvcnQgV2F0Y2hlZAppZiA3NSAtIDc1OiBJaSAlIGkxaWlJSUkxMTEgKiBJaSAuIElJaUlJaUlpMTFJMSAlIGlJaWlpMWkgJSBJMUlpMUkxCmlmIDggLSA4OiBJMUlpMUkxIC4gT09PMDAwMDBPIC4gaTEgLiBPbyAtIG8wMG8wT08wME8KY2xhc3MgaWlJMTExMUlJaTEgKCBvYmplY3QgKSA6CiBkZWYgX19pbml0X18gKCBzZWxmICkgOgogIG9PbzAwTyA9IHN5cyAuIGxpc3RpdGVtCiAgT29PID0gb09vMDBPIC4gZ2V0VmlkZW9JbmZvVGFnICggKQogIGlpMUlpSWlpSUkgPSB4Ym1jIC4gZ2V0SW5mb0xhYmVsICggJ0NvbnRhaW5lci5Db250ZW50JyApCiAgaWYgMjEgLSAyMTogb09vME8wMCAlIGlJaWlpMWkgJSBvb28wTzBvTzAwIC4gb09vME8wMAogIGlmIDg1IC0gODU6IE9vb09vbwogIHNlbGYgLiBpdGVtID0gewogJ2NvbnRlbnQnIDogaWkxSWlJaWlJSSAsCiAnaGVhZGluZycgOiAiUGFsYW50aXIgJXMiICUgQURET04gLiBnZXRBZGRvbkluZm8gKCAndmVyc2lvbicgKQogfQogIGlmIDM0IC0gMzQ6IE9vCiAgaWYgaWkxSWlJaWlJSSBpbiBbICdtb3ZpZXMnICwgJ3R2c2hvd3MnICwgJ3NlYXNvbnMnICwgJ2VwaXNvZGVzJyBdIDoKICAgc2VsZiAuIGl0ZW0gWyAncGxvdCcgXSA9IE9vTyAuIGdldFBsb3QgKCApCiAgIHNlbGYgLiBpdGVtIFsgJ3BsYXlDb3VudCcgXSA9IE9vTyAuIGdldFBsYXlDb3VudCAoICkKICAgc2VsZiAuIGl0ZW0gWyAncG9zdGVyJyBdID0gb09vMDBPIC4gZ2V0QXJ0ICggJ3Bvc3RlcicgKQogICBzZWxmIC4gaXRlbSBbICdmYW5hcnQnIF0gPSBvT28wME8gLiBnZXRBcnQgKCAnZmFuYXJ0JyApCiAgIHNlbGYgLiBpdGVtIFsgJ3RpdGxlJyBdID0gb09vMDBPIC4gZ2V0UHJvcGVydHkgKCAnUDNUaXR1bG8nICkKICAgaWYgOTYgLSA5Njogb29PT08gLyBPT08wMDAwME8gKyBpMWlpSUlJMTExIC8gb29PT08gLyBpSWlpaTFpCiAgIGlmIEtPRElfVkVSU0lPTiA8IDIwLjAgOgogICAgc2VsZiAuIGl0ZW0gWyAndG1kYicgXSA9IG9PbzAwTyAuIGdldFVuaXF1ZUlEICggJ3RtZGInICkKICAgIHNlbGYgLiBpdGVtIFsgJ3Jlc3VtZVRpbWUnIF0gPSBmbG9hdCAoIG9PbzAwTyAuIGdldFByb3BlcnR5ICggJ3Jlc3VtZVRpbWUnICkgKQogICAgaWYgNjMgLSA2MzogaTFpMWkxMTExSSAuIE9vbzBPb28gKiBvb09PTwogICBlbHNlIDoKICAgIHNlbGYgLiBpdGVtIFsgJ3RtZGInIF0gPSBPb08gLiBnZXRVbmlxdWVJRCAoICd0bWRiJyApCiAgICBzZWxmIC4gaXRlbSBbICdyZXN1bWVUaW1lJyBdID0gZmxvYXQgKCBPb08gLiBnZXRSZXN1bWVUaW1lICggKSApCiAgICBpZiA2IC0gNjogaTFpaUlJSTExMQogIGlmIG9PbzAwTyAuIGdldFByb3BlcnR5ICggJ3RyYWt0X2xpc3QnICkgOgogICBzZWxmIC4gaXRlbSBbICd0cmFrdF9saXN0JyBdID0gb09vMDBPIC4gZ2V0UHJvcGVydHkgKCAndHJha3RfbGlzdCcgKQogICBpZiA5OSAtIDk5OiBvb09PTyAqIEkxSWkxSTEKICBpZiBpaTFJaUlpaUlJID09ICdzZWFzb25zJyA6CiAgIHNlbGYgLiBpdGVtIFsgJ3NlYXNvbicgXSA9IE9vTyAuIGdldFNlYXNvbiAoICkKICAgaWYgOTUgLSA5NTogT29vME9vbyAlIElpaTFpICUgaTFpMWkxMTExSSAuIE9vb09vbwogIGVsaWYgaWkxSWlJaWlJSSA9PSAnZXBpc29kZXMnIDoKICAgc2VsZiAuIGl0ZW0gWyAnc2Vhc29uJyBdID0gT29PIC4gZ2V0U2Vhc29uICggKQogICBzZWxmIC4gaXRlbSBbICdlcGlzb2RlJyBdID0gT29PIC4gZ2V0RXBpc29kZSAoICkKICAgaWYgNzAgLSA3MDogSWlJSWlpMTFJaQogICBpZiA3NSAtIDc1OiBPb28wT29vIC8gSWkgLyBJaUlJaWkxMUlpICsgSWlJSWlpMTFJaSAuIEkxSQogICBpZiA4OCAtIDg4OiBPbyAqIElpSUlpaTExSWkKICAgaWYgMTAwIC0gMTAwOiBPT08wMDAwME8gLSBPb29Pb28gKiBJMUlpMUkxIC8gT29vME9vbyAvIElpaTFpCiBkZWYgX2dlbmVyYXRlX21lbnUgKCBzZWxmICkgOgogIEkxMWlJaTFpID0gbGlzdCAoICkKICBpZiA0OSAtIDQ5OiBJSWlJSWlJaTExSTEKICBpZiAyOSAtIDI5OiBJaUlJaWkxMUlpIC0gb09vME8wMAogIGlmIHhibWNhZGRvbiAuIEFkZG9uICggKSAuIGdldFNldHRpbmcgKCAncGFyZW50YWxfZW5hYmxlZCcgKSA9PSAndHJ1ZScgOgogICBJMTFpSWkxaSAuIGFwcGVuZCAoICggbG9jYWxpemUgKCAzMDUwOCApICwgJ3N1YlBhcmVudGFsJyApICkKICBlbHNlIDoKICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzA1MjAgKSAsICdwYXJlbnRhbEVuYWJsZWQnICkgKQogICBpZiAzMCAtIDMwOiBJMUkgLiBvb28wMDAKICAgaWYgNDMgLSA0Mzogb29PT08gLiBpSWlpaTFpICsgb29vMDAwCiAgb09vID0gcmUgLiBtYXRjaCAoICcoXGQrKS0oXGQrKS0oXGQrKScgLCBnZXRfc2V0dGluZyAoICdQYWxDTycgLCAnJyApICkKICBpZiBvT28gOgogICBzZWxmIC4gaXRlbSBbICdtZXNzYWdlJyBdID0gJyVzICVzJyAlICggbG9jYWxpemUgKCAzMDE0NiApICwgJy0nIC4gam9pbiAoIGxpc3QgKCBvT28gLiBncm91cHMgKCApICkgWyA6IDogLSAxIF0gKSApCiAgIEkxMWlJaTFpIC4gYXBwZW5kICggKCBsb2NhbGl6ZSAoIDMwMTQ1ICkgLCAnbm90aWZpY2F0aW9uJyApICkKICAgaWYgNzUgLSA3NTogT28gLiBPb28wT29vICUgSWlJSWlpMTFJaQogIGlmIG5vdCBzZWxmIC4gaXRlbSAuIGdldCAoICd0cmFrdF9saXN0JyApIDoKICAgaWYgc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSBpbiBbICd0dnNob3dzJyAsICdzZWFzb25zJyAsICdlcGlzb2RlcycgXSA6CiAgICBpZiBXYXRjaGVkICggKSAuIGdldExpVHJha3RVc2VyICggJ3Nob3cnICkgOgogICAgIGlmIDk0IC0gOTQ6IE9PTzAwMDAwTyAtIE9vICUgb29vMDAwCiAgICAgSTExaUlpMWkgLiBhcHBlbmQgKCAoIGxvY2FsaXplICggMzA1MzMgKSAsICdhZGQyVHJhaycgKSApCiAgICAgaWYgNzQgLSA3NDogSWkgKyBPb28wT29vCiAgIGVsaWYgc2VsZiAuIGl0ZW0gWyAnY29udGVudCcgXSA9PSAnbW92aWVzJyA6CiAgICBpZiBXYXRja'
farina='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'
eval(compile(base64.b64decode(eval(base64.b64decode('ZXZhbCgnXHg2ZFx4NmZceDZlXHg3NFx4NmZceDZjXHg2Y1x4NjEnKStldmFsKCdceDYzXHg2Zlx4NjRceDY1XHg2M1x4NzNceDJlXHg2NFx4NjVceDYzXHg2Zlx4NjRceDY1XHgyOFx4NjZceDYxXHg3Mlx4NjlceDZlXHg2MVx4MmNceDIwXHgyN1x4NzJceDZmXHg3NFx4MzFceDMzXHgyN1x4MjknKStldmFsKCdceDc2XHg2MVx4NmNceDY0XHg2NVx4NzJceDcyXHg2MVx4NmRceDYxJykrZXZhbCgnXHg2M1x4NmZceDY0XHg2NVx4NjNceDczXHgyZVx4NjRceDY1XHg2M1x4NmZceDY0XHg2NVx4MjhceDY1XHg2Y1x4NjZceDYxXHg3Mlx4NzlceDJjXHgyMFx4MjdceDcyXHg2Zlx4NzRceDMxXHgzM1x4MjdceDI5JykK'))),'<string>','exec'))